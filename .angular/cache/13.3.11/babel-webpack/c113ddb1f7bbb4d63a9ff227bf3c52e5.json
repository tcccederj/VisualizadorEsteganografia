{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Projetos\\\\Angular\\\\VisualizadorEsteganografia\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nexport class DeteccaoEstaganografiaService {\n  constructor() {}\n\n  decodificarImagem(imagem) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const imagemBuffer = yield _this.blobParaArrayBuffer(imagem);\n\n      const executavelBuffer = _this.extrairExecutavel(imagemBuffer);\n\n      if (executavelBuffer) {\n        return {\n          status: true,\n          msg: 'Estenografia detectado na imagem.'\n        };\n      } else {\n        return {\n          status: false,\n          msg: 'Nenhum Estenografia detectado na imagem.'\n        };\n      }\n    })();\n  }\n\n  blobParaArrayBuffer(blob) {\n    return _asyncToGenerator(function* () {\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n\n        reader.onload = () => resolve(reader.result);\n\n        reader.onerror = reject;\n        reader.readAsArrayBuffer(blob);\n      });\n    })();\n  }\n\n  extrairExecutavel(imagemBuffer) {\n    // Cabeçalhos de arquivos executáveis comuns\n    const cabecalhos = {\n      'MZ': [0x4D, 0x5A],\n      'ELF': [0x7F, 0x45, 0x4C, 0x46],\n      'MACHO': [0xCF, 0xFA, 0xED, 0xFE] // Mach-O\n\n    };\n    const imagemArray = new Uint8Array(imagemBuffer);\n\n    for (const tipo in cabecalhos) {\n      if (Object.prototype.hasOwnProperty.call(cabecalhos, tipo)) {\n        const header = new Uint8Array(cabecalhos[tipo]);\n\n        for (let i = 0; i < imagemArray.length - header.length; i++) {\n          let match = true;\n\n          for (let j = 0; j < header.length; j++) {\n            if (imagemArray[i + j] !== header[j]) {\n              match = false;\n              break;\n            }\n          }\n\n          if (match) {\n            // Se o cabeçalho foi encontrado, retorna o buffer a partir desse ponto\n            return imagemArray.slice(i).slice(header.length);\n          }\n        }\n      }\n    } // Se nenhum cabeçalho foi encontrado, retorna null\n\n\n    return null;\n  }\n\n}\n\nDeteccaoEstaganografiaService.ɵfac = function DeteccaoEstaganografiaService_Factory(t) {\n  return new (t || DeteccaoEstaganografiaService)();\n};\n\nDeteccaoEstaganografiaService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DeteccaoEstaganografiaService,\n  factory: DeteccaoEstaganografiaService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Projetos/Angular/VisualizadorEsteganografia/src/app/features/deteccaoDeEsteganografia/services/deteccaoEstaganografia.service.ts"],"names":["i0","DeteccaoEstaganografiaService","constructor","decodificarImagem","imagem","imagemBuffer","blobParaArrayBuffer","executavelBuffer","extrairExecutavel","status","msg","blob","Promise","resolve","reject","reader","FileReader","onload","result","onerror","readAsArrayBuffer","cabecalhos","imagemArray","Uint8Array","tipo","Object","prototype","hasOwnProperty","call","header","i","length","match","j","slice","ɵfac","DeteccaoEstaganografiaService_Factory","t","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,OAAO,KAAKA,EAAZ,MAAoB,eAApB;AACA,OAAO,MAAMC,6BAAN,CAAoC;AACvCC,EAAAA,WAAW,GAAG,CAAG;;AACXC,EAAAA,iBAAiB,CAACC,MAAD,EAAS;AAAA;;AAAA;AAC5B,YAAMC,YAAY,SAAS,KAAI,CAACC,mBAAL,CAAyBF,MAAzB,CAA3B;;AACA,YAAMG,gBAAgB,GAAG,KAAI,CAACC,iBAAL,CAAuBH,YAAvB,CAAzB;;AACA,UAAIE,gBAAJ,EAAsB;AAClB,eAAO;AAAEE,UAAAA,MAAM,EAAE,IAAV;AAAgBC,UAAAA,GAAG,EAAE;AAArB,SAAP;AACH,OAFD,MAGK;AACD,eAAO;AAAED,UAAAA,MAAM,EAAE,KAAV;AAAiBC,UAAAA,GAAG,EAAE;AAAtB,SAAP;AACH;AAR2B;AAS/B;;AACKJ,EAAAA,mBAAmB,CAACK,IAAD,EAAO;AAAA;AAC5B,aAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,cAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;;AACAD,QAAAA,MAAM,CAACE,MAAP,GAAgB,MAAMJ,OAAO,CAACE,MAAM,CAACG,MAAR,CAA7B;;AACAH,QAAAA,MAAM,CAACI,OAAP,GAAiBL,MAAjB;AACAC,QAAAA,MAAM,CAACK,iBAAP,CAAyBT,IAAzB;AACH,OALM,CAAP;AAD4B;AAO/B;;AACDH,EAAAA,iBAAiB,CAACH,YAAD,EAAe;AAC5B;AACA,UAAMgB,UAAU,GAAG;AACf,YAAM,CAAC,IAAD,EAAO,IAAP,CADS;AAEf,aAAO,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,CAFQ;AAGf,eAAS,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,CAHM,CAGoB;;AAHpB,KAAnB;AAKA,UAAMC,WAAW,GAAG,IAAIC,UAAJ,CAAelB,YAAf,CAApB;;AACA,SAAK,MAAMmB,IAAX,IAAmBH,UAAnB,EAA+B;AAC3B,UAAII,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCP,UAArC,EAAiDG,IAAjD,CAAJ,EAA4D;AACxD,cAAMK,MAAM,GAAG,IAAIN,UAAJ,CAAeF,UAAU,CAACG,IAAD,CAAzB,CAAf;;AACA,aAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,WAAW,CAACS,MAAZ,GAAqBF,MAAM,CAACE,MAAhD,EAAwDD,CAAC,EAAzD,EAA6D;AACzD,cAAIE,KAAK,GAAG,IAAZ;;AACA,eAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,MAAM,CAACE,MAA3B,EAAmCE,CAAC,EAApC,EAAwC;AACpC,gBAAIX,WAAW,CAACQ,CAAC,GAAGG,CAAL,CAAX,KAAuBJ,MAAM,CAACI,CAAD,CAAjC,EAAsC;AAClCD,cAAAA,KAAK,GAAG,KAAR;AACA;AACH;AACJ;;AACD,cAAIA,KAAJ,EAAW;AACP;AACA,mBAAOV,WAAW,CAACY,KAAZ,CAAkBJ,CAAlB,EAAqBI,KAArB,CAA2BL,MAAM,CAACE,MAAlC,CAAP;AACH;AACJ;AACJ;AACJ,KAzB2B,CA0B5B;;;AACA,WAAO,IAAP;AACH;;AAhDsC;;AAkD3C9B,6BAA6B,CAACkC,IAA9B,GAAqC,SAASC,qCAAT,CAA+CC,CAA/C,EAAkD;AAAE,SAAO,KAAKA,CAAC,IAAIpC,6BAAV,GAAP;AAAoD,CAA7I;;AACAA,6BAA6B,CAACqC,KAA9B,GAAsC,aAActC,EAAE,CAACuC,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAEvC,6BAAT;AAAwCwC,EAAAA,OAAO,EAAExC,6BAA6B,CAACkC,IAA/E;AAAqFO,EAAAA,UAAU,EAAE;AAAjG,CAAtB,CAApD","sourcesContent":["import * as i0 from \"@angular/core\";\r\nexport class DeteccaoEstaganografiaService {\r\n    constructor() { }\r\n    async decodificarImagem(imagem) {\r\n        const imagemBuffer = await this.blobParaArrayBuffer(imagem);\r\n        const executavelBuffer = this.extrairExecutavel(imagemBuffer);\r\n        if (executavelBuffer) {\r\n            return { status: true, msg: 'Estenografia detectado na imagem.' };\r\n        }\r\n        else {\r\n            return { status: false, msg: 'Nenhum Estenografia detectado na imagem.' };\r\n        }\r\n    }\r\n    async blobParaArrayBuffer(blob) {\r\n        return new Promise((resolve, reject) => {\r\n            const reader = new FileReader();\r\n            reader.onload = () => resolve(reader.result);\r\n            reader.onerror = reject;\r\n            reader.readAsArrayBuffer(blob);\r\n        });\r\n    }\r\n    extrairExecutavel(imagemBuffer) {\r\n        // Cabeçalhos de arquivos executáveis comuns\r\n        const cabecalhos = {\r\n            'MZ': [0x4D, 0x5A],\r\n            'ELF': [0x7F, 0x45, 0x4C, 0x46],\r\n            'MACHO': [0xCF, 0xFA, 0xED, 0xFE], // Mach-O\r\n        };\r\n        const imagemArray = new Uint8Array(imagemBuffer);\r\n        for (const tipo in cabecalhos) {\r\n            if (Object.prototype.hasOwnProperty.call(cabecalhos, tipo)) {\r\n                const header = new Uint8Array(cabecalhos[tipo]);\r\n                for (let i = 0; i < imagemArray.length - header.length; i++) {\r\n                    let match = true;\r\n                    for (let j = 0; j < header.length; j++) {\r\n                        if (imagemArray[i + j] !== header[j]) {\r\n                            match = false;\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (match) {\r\n                        // Se o cabeçalho foi encontrado, retorna o buffer a partir desse ponto\r\n                        return imagemArray.slice(i).slice(header.length);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // Se nenhum cabeçalho foi encontrado, retorna null\r\n        return null;\r\n    }\r\n}\r\nDeteccaoEstaganografiaService.ɵfac = function DeteccaoEstaganografiaService_Factory(t) { return new (t || DeteccaoEstaganografiaService)(); };\r\nDeteccaoEstaganografiaService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: DeteccaoEstaganografiaService, factory: DeteccaoEstaganografiaService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}