{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport let EsteganografiaService = /*#__PURE__*/(() => {\n  class EsteganografiaService {\n    constructor() {}\n\n    esconderExecutável(imagem, executavel) {\n      return new Promise((resolve, reject) => {\n        const readerImagem = new FileReader();\n\n        readerImagem.onload = () => {\n          const imagemBuffer = new Uint8Array(readerImagem.result);\n          const readerExecutavel = new FileReader();\n\n          readerExecutavel.onload = () => {\n            const executavelBuffer = new Uint8Array(readerExecutavel.result);\n            const novaImagemBuffer = this.esconderLSB(imagemBuffer, executavelBuffer);\n            const novaImagemBlob = new Blob([novaImagemBuffer], {\n              type: imagem.type\n            });\n            resolve(novaImagemBlob);\n          };\n\n          readerExecutavel.onerror = error => reject(error);\n\n          readerExecutavel.readAsArrayBuffer(executavel);\n        };\n\n        readerImagem.onerror = error => reject(error);\n\n        readerImagem.readAsArrayBuffer(imagem);\n      });\n    }\n\n    esconderLSB(imagemBuffer, executavelBuffer) {\n      // Converte o executável para um array de bytes\n      const bytesExecutavel = Array.from(executavelBuffer); // Percorre os bytes da imagem\n\n      for (let i = 0; i < imagemBuffer.length; i += 4) {\n        // Modifica os bits menos significativos do byte para armazenar um byte do executável\n        imagemBuffer[i] &= 0b11111110;\n        imagemBuffer[i] |= bytesExecutavel[i / 4] & 0b1; // Outras manipulações de bytes LSB aqui...\n      }\n\n      return imagemBuffer;\n    }\n\n  }\n\n  EsteganografiaService.ɵfac = function EsteganografiaService_Factory(t) {\n    return new (t || EsteganografiaService)();\n  };\n\n  EsteganografiaService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: EsteganografiaService,\n    factory: EsteganografiaService.ɵfac,\n    providedIn: 'root'\n  });\n  return EsteganografiaService;\n})();","map":null,"metadata":{},"sourceType":"module"}